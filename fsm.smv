MODULE main

VAR


------------------- Environment and State variables --------------------
AHHHHH	:	boolean;	
ue_start_cell_selection	:	boolean;	
ue_has_cell_info	:	boolean;	
ue_stored_info_cell_selection_started	:	boolean;	
ue_found_suitable_cell	:	boolean;	
ue_monitoring_paging_channel	:	boolean;	
nb_MIB_sent	:	boolean;	
ue_MIB_received	:	boolean;	
nb_SIBs_sent	:	boolean;	
ue_SIBs_received	:	boolean;	
ue_PRACH_preamble_sent	:	boolean;	
nb_PRACH_preamble_received	:	boolean;	
nb_RACH_response_sent	:	boolean;	
ue_cell_info_bad	:	boolean;	
ue_connection_request_sent	:	boolean;	
nb_connection_setup_sent	:	boolean;	
ue_is_connected	:	boolean;	
nb_is_connected	:	boolean;	
nb_down_link_info_sent	:	boolean;	
nb_down_link_info2_sent	:	boolean;	
ue_up_link_info_sent	:	boolean;	
nb_connection_release_sent	:	boolean;	
nb_bad_carrier_redirection_info	:	boolean;	
ue_down_link_info2_recv	:	boolean;	
attacker_inject_message_chanUE	:	boolean	;
attacker_inject_message_chanNB	:	boolean	;

----------------- Sequence numbers -------------------

---------------- state for UE state machine ----------------

ue_state	:
{
	ue_rrc_idle,
	ue_rrc_connected
};

---------------- state for NB state machine ----------------

nb_state	:
{
	nb_rrc_idle,
	nb_rrc_connected
};
------------ Possible UE actions ----------------

ue_action	:
{
	ue_null_action,
	ue_PRACH_preamble,
	ue_connection_request,
	ue_connection_complete,
	ue_up_link_info
};
------------ Possible NB actions ----------------

nb_action	:
{
	nb_MIB,
	nb_SIBs,
	nb_RACH_response,
	nb_connection_setup,
	nb_down_link_info,
	nb_down_link_info2,
	nb_null_action,
	nb_connection_release
};

--------------- Adversarial channel from NB to UE ---------------

chan_UE	:
{
	chanUE_null_action,
	chanUE_MIB,
	chanUE_SIBs,
	chanUE_RACH_response,
	chanUE_connection_setup,
	chanUE_down_link_info,
	chanUE_down_link_info2,
	chanUE_connection_release
};

--------------- Adversarial channel from UE to NB ---------------

chan_NB	:
{
	chanNB_null_action,
	chanNB_PRACH_preamble,
	chanNB_connection_request,
	chanNB_connection_complete,
	chanNB_up_link_info
};

--------------- Injection adversary action for channel chan_UE ---------------

inj_adv_act_NB	:
{
	adv_NB_null_action,
	adv_NB_MIB,
	adv_NB_SIBs,
	adv_NB_RACH_response,
	adv_NB_connection_setup,
	adv_NB_down_link_info,
	adv_NB_down_link_info2,
	adv_NB_connection_release
};

--------------- Injection adversary action for channel chan_NB ---------------

inj_adv_act_UE	:
{
	adv_UE_null_action,
	adv_UE_PRACH_preamble,
	adv_UE_connection_request,
	adv_UE_connection_complete,
	adv_UE_up_link_info
};


DEFINE

-----------------UE transitions --------------------
ue_T1	:=	 (ue_state = ue_rrc_idle & 
                         ue_start_cell_selection & ue_has_cell_info & !ue_connection_request_sent & !ue_is_connected 
                    )	;
ue_T2	:=	 (ue_state = ue_rrc_idle & 
                         ue_start_cell_selection & ue_has_cell_info & ue_stored_info_cell_selection_started & !ue_connection_request_sent & !ue_is_connected 
                    )	;
ue_T3	:=	 (ue_state = ue_rrc_idle & 
                        chan_UE=chanUE_MIB & ue_start_cell_selection & ue_found_suitable_cell & ue_monitoring_paging_channel & !ue_connection_request_sent & !ue_is_connected 
                    )	;
ue_T4	:=	 (ue_state = ue_rrc_idle & 
                         chan_UE=chanUE_SIBs & ue_start_cell_selection & ue_MIB_received & ue_found_suitable_cell & ue_monitoring_paging_channel & !ue_connection_request_sent & !ue_is_connected 
                    )	;
ue_T5	:=	 (ue_state = ue_rrc_idle & 
                         chan_UE=chanUE_RACH_response & ue_start_cell_selection & ue_PRACH_preamble_sent & ue_MIB_received & ue_SIBs_received & ue_found_suitable_cell & ue_monitoring_paging_channel & !ue_connection_request_sent & !ue_is_connected 
                    )	;
ue_T6	:=	 (ue_state = ue_rrc_idle & 
                        chan_UE=chanUE_connection_setup & ue_connection_request_sent 
                    )	;
ue_T7	:=	 (ue_state = ue_rrc_connected & 
                        chan_UE=chanUE_down_link_info & ue_is_connected & ue_connection_request_sent 
                    )	;
ue_T8	:=	 (ue_state = ue_rrc_connected & 
                        chan_UE=chanUE_down_link_info2 & ue_is_connected & ue_up_link_info_sent & ue_connection_request_sent
                    )	;
ue_T9	:=	 (ue_state = ue_rrc_connected & 
                        chan_UE=chanUE_connection_release & ue_is_connected & !nb_bad_carrier_redirection_info
             & 
                        ue_down_link_info2_recv & ue_up_link_info_sent 
                    )	;
ue_T10	:=	 (ue_state = ue_rrc_connected & 
                        chan_UE=chanUE_connection_release & ue_is_connected & nb_bad_carrier_redirection_info & 
                        ue_down_link_info2_recv & ue_up_link_info_sent 
                    )	;

-----------------NB transitions --------------------
nb_T1	:=	 (nb_state = nb_rrc_idle & 
                            ue_monitoring_paging_channel  & !nb_down_link_info_sent & !nb_MIB_sent & nb_connection_release_sent
                        )	;
nb_T2	:=	 (nb_state = nb_rrc_idle & 
                            nb_MIB_sent & ue_monitoring_paging_channel & !nb_connection_setup_sent & !nb_down_link_info_sent & !nb_SIBs_sent
                        )	;
nb_T3	:=	 (nb_state = nb_rrc_idle & 
                            chan_NB=chanNB_PRACH_preamble & nb_SIBs_sent & nb_MIB_sent & ue_monitoring_paging_channel & !nb_connection_setup_sent & !nb_down_link_info_sent & !nb_SIBs_sent
                        )	;
nb_T4	:=	 (nb_state = nb_rrc_idle & 
                            chan_NB=chanNB_connection_request & nb_PRACH_preamble_received & nb_RACH_response_sent & !nb_connection_setup_sent & nb_MIB_sent & nb_SIBs_sent
                        )	;
nb_T5	:=	 (nb_state = nb_rrc_idle & 
                            chan_NB=chanNB_connection_complete & nb_connection_setup_sent & !nb_down_link_info_sent
                        )	;
nb_T6	:=	 (nb_state = nb_rrc_connected & 
                            chan_NB=chanNB_up_link_info 
                        )	;
nb_T7	:=	 (nb_state = nb_rrc_connected & 
                            chan_NB=chanNB_up_link_info 
                        )	;
nb_T8	:=	 (nb_state = nb_rrc_connected & 
                            nb_down_link_info2_sent & nb_down_link_info_sent
                        )	;

------------------- Noisy Channels --------------------
noisy_channel_UE:=	FALSE;
noisy_channel_NB:=	FALSE;

------------------- Adversary enabled or not --------------------
inj_adv_NB_enabled:=	TRUE;
inj_adv_UE_enabled:=	FALSE;


ASSIGN


------------------- Adversarial state machines --------------------

init(inj_adv_act_NB)	:=
{
	adv_NB_null_action,
	adv_NB_MIB,
	adv_NB_SIBs,
	adv_NB_RACH_response,
	adv_NB_connection_setup,
	adv_NB_down_link_info,
	adv_NB_down_link_info2,
	adv_NB_connection_release
};

next(inj_adv_act_NB)	:=	case
TRUE	:	{
	adv_NB_null_action,
	adv_NB_MIB,
	adv_NB_SIBs,
	adv_NB_RACH_response,
	adv_NB_connection_setup,
	adv_NB_down_link_info,
	adv_NB_down_link_info2,
	adv_NB_connection_release
};
esac	;

init(inj_adv_act_UE)	:=
{
	adv_UE_null_action,
	adv_UE_PRACH_preamble,
	adv_UE_connection_request,
	adv_UE_connection_complete,
	adv_UE_up_link_info
};

next(inj_adv_act_UE)	:=	case
TRUE	:	{
	adv_UE_null_action,
	adv_UE_PRACH_preamble,
	adv_UE_connection_request,
	adv_UE_connection_complete,
	adv_UE_up_link_info
};
esac	;


---------------UE state machine ------------------

init(ue_state)	:=ue_rrc_idle;

next(ue_state)	:=	 case

(ue_T1 | ue_T2 | ue_T3 | ue_T4 | ue_T5 | ue_T9 | ue_T10 )	:	ue_rrc_idle	;
(ue_T6 | ue_T7 | ue_T8 )	:	ue_rrc_connected	;
TRUE	:	ue_state	;
esac	;

---------------NB state machine ------------------

init(nb_state)	:=nb_rrc_idle;

next(nb_state)	:=	 case

(nb_T1 | nb_T2 | nb_T3 | nb_T4 | nb_T8 )	:	nb_rrc_idle	;
(nb_T5 | nb_T6 | nb_T7 )	:	nb_rrc_connected	;
TRUE	:	nb_state	;
esac	;


init(ue_action)	:= ue_null_action	;

next(ue_action)	:=	 case

(ue_T1 | ue_T2 | ue_T3 | ue_T8 | ue_T9 | ue_T10 )	:	ue_null_action	;
(ue_T4 )	:	ue_PRACH_preamble	;
(ue_T5 )	:	ue_connection_request	;
(ue_T6 )	:	ue_connection_complete	;
(ue_T7 )	:	ue_up_link_info	;
TRUE	:	ue_null_action	;
esac	;


init(nb_action)	:= nb_null_action	;

next(nb_action)	:=	 case

(nb_T1 )	:	nb_MIB	;
(nb_T2 )	:	nb_SIBs	;
(nb_T3 )	:	nb_RACH_response	;
(nb_T4 )	:	nb_connection_setup	;
(nb_T5 )	:	nb_down_link_info	;
(nb_T6 )	:	nb_down_link_info2	;
(nb_T7 )	:	nb_null_action	;
(nb_T8 )	:	nb_connection_release	;
TRUE	:	nb_null_action	;
esac	;

init(chan_UE)	:=	chanUE_null_action;

next(chan_UE)	:=	 case
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_null_action	:	chanUE_null_action	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_MIB	:	chanUE_MIB	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_SIBs	:	chanUE_SIBs	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_RACH_response	:	chanUE_RACH_response	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_connection_setup	:	chanUE_connection_setup	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_down_link_info	:	chanUE_down_link_info	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_down_link_info2	:	chanUE_down_link_info2	;
attacker_inject_message_chanUE	&	inj_adv_NB_enabled	&	inj_adv_act_NB	=	adv_NB_connection_release	:	chanUE_connection_release	;
! noisy_channel_UE	&	nb_action	=	 nb_null_action	:	chanUE_null_action	;
! noisy_channel_UE	&	nb_action	=	 nb_MIB	:	chanUE_MIB	;
! noisy_channel_UE	&	nb_action	=	 nb_SIBs	:	chanUE_SIBs	;
! noisy_channel_UE	&	nb_action	=	 nb_RACH_response	:	chanUE_RACH_response	;
! noisy_channel_UE	&	nb_action	=	 nb_connection_setup	:	chanUE_connection_setup	;
! noisy_channel_UE	&	nb_action	=	 nb_down_link_info	:	chanUE_down_link_info	;
! noisy_channel_UE	&	nb_action	=	 nb_down_link_info2	:	chanUE_down_link_info2	;
! noisy_channel_UE	&	nb_action	=	 nb_connection_release	:	chanUE_connection_release	;

TRUE	:
{
	chanUE_null_action,
	chanUE_MIB,
	chanUE_SIBs,
	chanUE_RACH_response,
	chanUE_connection_setup,
	chanUE_down_link_info,
	chanUE_down_link_info2,
	chanUE_connection_release
}	;
esac	;


init(chan_NB)	:=	chanNB_null_action;

next(chan_NB)	:=	 case
attacker_inject_message_chanNB	&	inj_adv_UE_enabled	&	inj_adv_act_UE	=	adv_UE_null_action	:	chanNB_null_action	;
attacker_inject_message_chanNB	&	inj_adv_UE_enabled	&	inj_adv_act_UE	=	adv_UE_PRACH_preamble	:	chanNB_PRACH_preamble	;
attacker_inject_message_chanNB	&	inj_adv_UE_enabled	&	inj_adv_act_UE	=	adv_UE_connection_request	:	chanNB_connection_request	;
attacker_inject_message_chanNB	&	inj_adv_UE_enabled	&	inj_adv_act_UE	=	adv_UE_connection_complete	:	chanNB_connection_complete	;
attacker_inject_message_chanNB	&	inj_adv_UE_enabled	&	inj_adv_act_UE	=	adv_UE_up_link_info	:	chanNB_up_link_info	;
! noisy_channel_NB	&	ue_action	=	 ue_null_action	:	chanNB_null_action	;
! noisy_channel_NB	&	ue_action	=	 ue_PRACH_preamble	:	chanNB_PRACH_preamble	;
! noisy_channel_NB	&	ue_action	=	 ue_connection_request	:	chanNB_connection_request	;
! noisy_channel_NB	&	ue_action	=	 ue_connection_complete	:	chanNB_connection_complete	;
! noisy_channel_NB	&	ue_action	=	 ue_up_link_info	:	chanNB_up_link_info	;

TRUE	:
{
	chanNB_null_action,
	chanNB_PRACH_preamble,
	chanNB_connection_request,
	chanNB_connection_complete,
	chanNB_up_link_info
}	;
esac	;



init(ue_start_cell_selection)	:= TRUE	;

next(ue_start_cell_selection)	:=	 case
(ue_T9 | ue_T10 )	:	TRUE	;
TRUE	:	ue_start_cell_selection	;
esac	;



init(ue_stored_info_cell_selection_started)	:= FALSE	;

next(ue_stored_info_cell_selection_started)	:=	 case
(ue_T1 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_stored_info_cell_selection_started	;
esac	;



init(ue_monitoring_paging_channel)	:= FALSE	;

next(ue_monitoring_paging_channel)	:=	 case
(ue_T2 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_monitoring_paging_channel	;
esac	;



init(nb_MIB_sent)	:= FALSE	;

next(nb_MIB_sent)	:=	 case
(nb_T1 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_MIB_sent	;
esac	;



init(ue_MIB_received)	:= FALSE	;

next(ue_MIB_received)	:=	 case
(ue_T3 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_MIB_received	;
esac	;



init(nb_SIBs_sent)	:= FALSE	;

next(nb_SIBs_sent)	:=	 case
(nb_T2 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_SIBs_sent	;
esac	;



init(ue_PRACH_preamble_sent)	:= FALSE	;

next(ue_PRACH_preamble_sent)	:=	 case
(ue_T4 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_PRACH_preamble_sent	;
esac	;



init(nb_PRACH_preamble_received)	:= FALSE	;

next(nb_PRACH_preamble_received)	:=	 case
(nb_T3 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_PRACH_preamble_received	;
esac	;



init(nb_RACH_response_sent)	:= FALSE	;

next(nb_RACH_response_sent)	:=	 case
(nb_T3 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_RACH_response_sent	;
esac	;



init(ue_cell_info_bad)	:= FALSE	;

next(ue_cell_info_bad)	:=	 case
(ue_T10 )	:	TRUE	;
TRUE	:	ue_cell_info_bad	;
esac	;



init(ue_connection_request_sent)	:= FALSE	;

next(ue_connection_request_sent)	:=	 case
(ue_T5 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_connection_request_sent	;
esac	;



init(nb_connection_setup_sent)	:= FALSE	;

next(nb_connection_setup_sent)	:=	 case
(nb_T4 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_connection_setup_sent	;
esac	;



init(ue_is_connected)	:= FALSE	;

next(ue_is_connected)	:=	 case
(ue_T6 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_is_connected	;
esac	;



init(nb_is_connected)	:= FALSE	;

next(nb_is_connected)	:=	 case
(nb_T5 )	:	TRUE	;
TRUE	:	nb_is_connected	;
esac	;



init(nb_down_link_info_sent)	:= FALSE	;

next(nb_down_link_info_sent)	:=	 case
(nb_T5 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_down_link_info_sent	;
esac	;



init(nb_down_link_info2_sent)	:= FALSE	;

next(nb_down_link_info2_sent)	:=	 case
(nb_T6 )	:	TRUE	;
(nb_T8 )	:	FALSE	;
TRUE	:	nb_down_link_info2_sent	;
esac	;



init(ue_up_link_info_sent)	:= FALSE	;

next(ue_up_link_info_sent)	:=	 case
(ue_T7 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_up_link_info_sent	;
esac	;



init(nb_connection_release_sent)	:= FALSE	;

next(nb_connection_release_sent)	:=	 case
(nb_T8 )	:	TRUE	;
(nb_T1 )	:	FALSE	;
TRUE	:	nb_connection_release_sent	;
esac	;



init(ue_down_link_info2_recv)	:= FALSE	;

next(ue_down_link_info2_recv)	:=	 case
(ue_T8 )	:	TRUE	;
(ue_T9 | ue_T10 )	:	FALSE	;
TRUE	:	ue_down_link_info2_recv	;
esac	;


LTLSPEC G(ue_is_connected -> !ue_cell_info_bad)

---Old properties from SMF state machine

---Discovery may only complete after discovery was initiated
---LTLSPEC nrf_discover_completed -> O(nrf_discover_requested);

---The state can only change to chf_selected once one of the methods has succeeded
---LTLSPEC has_charging_identifier -> (pcf_provides_address | udm_provides_characteristics | nrf_discover_good | has_local_CHF_charactaristics)

---If a PDU init happens, we will always eventually get the CHF identifier (deliberately has counterexample)
---LTLSPEC incoming_pdu_init -> F(has_charging_identifier);
